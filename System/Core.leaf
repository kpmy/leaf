MODULE Core

	PROCEDURE LoadMod+
		VAR mod- STRING
		VAR msg MAP
		PRE mod # ""
	BEGIN
		msg."type" := "kernel"
		msg."action" := "load"
		msg."data" := mod
		PROCESS(to<-msg)
	END LoadMod

	PROCEDURE Listen+
		VAR msg+ MAP; timeout- INTEGER
		VAR i, o MAP; x ANY
	BEGIN
		o."type" := "kernel"
		o."action" := "event"
		o."timeout" := timeout
		PROCESS(to <-o, from -> i)
		x:=i."type"
		CHOOSE x AS STRING: ASSERT(cond: x = "kernel", code: 99) ELSE HALT(code: 100) END
		x:=i."data"
		CHOOSE x AS MAP: msg := x ELSE HALT(code: 101) END
	END Listen

	PROCEDURE Broadcast+
		VAR msg- MAP
		VAR o MAP; p PTR
	BEGIN
		o."type" := "kernel"
		o."action" := "broadcast"
		NEW(p -> p)
		p$ := msg
		o."data" := p
		PROCESS(to <- o)
	END Broadcast

END Core.
