(* evil no caps ;) *)
module TestEvil
	var i integer
begin
end TestEvil.

(* empty module *)
MODULE TestEmpty
END TestEmpty.

(* assign statement *)
MODULE TestAssign
	CONST I = 4
	VAR i INTEGER
BEGIN
	i := 1
CLOSE
	i := I
END TestAssign.

(* arithmetics *)
MODULE TestArithmetics
VAR
	i, j INTEGER
	k INTEGER
BEGIN
	i := 0
	j := i
	k := -5
	k := j + 1
	i := -i + k
	j := i + i + k - j
	k := i * 2
	j := k  // 2 + 1 - 89 * 4 * 4
	i := (i + 5) // (1 + j % 7)
END TestArithmetics.

(* logic *)
MODULE TestLogic
	VAR a, b, c BOOLEAN
	VAR p, q, r TRILEAN
BEGIN
	a := TRUE
	b := FALSE
	c := ~a & b | c | TRUE
CLOSE
	p := TRUE
	q := FALSE
	r := NULL
	r:= p & ~q | r | TRUE
END TestLogic.

(* comparisions, braces *)
MODULE TestComp
VAR
	i, j INTEGER
	ok BOOLEAN

BEGIN
	i := 4
	j := (i + 9) % 2
	ok := i < 4
	ok := i > 4
	ok := ((i + 4) >= (j+ 49)) & (i <= 144)
	ok := ok & (i # j) | (i = j)
END TestComp.

(* forwarding expr in CONST *)
MODULE TestExpr
	CONST
		num = count -1
		len = 5
		count  = len // 2
	VAR i INTEGER
BEGIN
	i:= count - num
END TestExpr.

(* pow and long sequences *)
MODULE TestExpr2
	VAR i INTEGER
	VAR j INTEGER
	VAR s, t INTEGER
	VAR p, q REAL
BEGIN
	i := 2 ^ 2 * 2
	j := i ^ (i - 3) // 2 // 3 // 4 // 5 // 6 // 7
	s := s*s + t*t - s+t^i - s^j + s*i
	p := 9/27
	q := 2/1
	p := p ^ q
	q := 9 ^ q
END TestExpr2.

(* chars and complex comparisions *)
MODULE TestChars
	CONST
		cr = 0DU
		lf = 0AU
		space = ' '
		tab = 09U
	VAR
		x CHAR
		y CHAR
		ok BOOLEAN
		p, q TRILEAN
BEGIN
	x := '$'
	x := 0DU
	x := space
	y := 0DU
CLOSE
	ok := (x = '$')
	ok := (x = space) & (y = cr)
	ok := (x = space) # (y = cr)
	ok := (x # space) = (y # cr)
	ok := (y > cr) | (y >= cr) & (x < lf) | (x <=lf)
	ok := (p = q) & (p # q)
	ok := (TRUE = FALSE)
	ok := (NULL = FALSE)
	ok := (NULL # TRUE)
	ok := (TRUE # NULL)
	ok := (TRUE = NULL)
END TestChars.

(* strings and string comparision *)
MODULE TestStrings
	CONST
		hello = "Hello"
		world = "World"
	VAR
		s STRING
		t STRING
		ok BOOLEAN
BEGIN
	s := hello + ", "+ world + `!`
	t := s
	ok :=~(t # s) & (t = s)
	s := `?` + "DLROW" + ` ` +  "`" + "OLLEH"
	t := "" + '!'
	t := "~"
	s := "abba"
	t := "baab"
	ok := (s > t) | (s >= t) & (t < s) | (t <= s)
	s := '1' + '4' + hello
END TestStrings.

(* integers without visible limit *)
MODULE TestBig
	CONST max = 232351311000000000000013132342342354235235234234234234234111111324235235234234
	VAR i INTEGER
BEGIN
	i := max + max + max
END TestBig.

MODULE TestAtom
	CONST A; B; C
	VAR a, b, c ATOM
	VAR ok BOOLEAN
BEGIN
	a := A
	b := B
	ok := (a = b) & (a # b) & (a # C)
	ok := c = UNDEF
	ok := UNDEF = c
	ok := UNDEF # c
	ok := c # UNDEF
	a := b
	ok := (a = b)
END TestAtom.

MODULE TestReal
	CONST
		Pi = 3.14
		E = 2.71
	VAR
		r, s, t REAL
		i, j INTEGER
		ok BOOLEAN
BEGIN
	r := 0.1
	r := Pi
	r := -r
	s := E
	t := Pi / (E + 1.0)
	i := 45
	j := 443
	s := i/j
	t:=i/s
	s:=j/t
	s := s*s + t*t - s + t^i - s^j + s*i + s + i + s / i + s - i
	s := s / i + s * i
	ok := (s > t) | (s >= t) & (s < t) | (s <= t)
	ok := (s = t) & (s # t)
END TestReal.

MODULE TestComplex
	CONST
		i = !1
		iE = !2.71
		re = 14
		im = 34
		cmp = re +! im
		cmp2 = 14 -!44
	VAR x COMPLEX
BEGIN
	x:=cmp + cmp2 + i
END TestComplex.

MODULE TestSelector
	CONST hw = "Hello, World!"
	VAR s, t STRING; i INTEGER; c CHAR; ok BOOLEAN
BEGIN
	s := hw
	c := s[0]
	i := 1
	c := hw[i+1]
	ok := (hw[2] = s[i+1])
	s[0] := 044U
	ok := s[0] # 043U
	t:=s[0]+s[1]+s[2]+s[3]+s[4]
END TestSelector.

MODULE TestIF
	VAR x BOOLEAN
	VAR i, j INTEGER
BEGIN
	x := TRUE
	IF x THEN
		i := 1
		j := 0
	END
	x := FALSE
	IF x THEN
		i := 1
		j := i
	ELSIF i # 1 THEN
		j:=123
		IF j > 100 THEN
			i := 1
			j := 0
		END
	ELSE
		i := 2
		j := j + i
	END
END TestIF.

MODULE TestCycles
	VAR i INTEGER
	VAR r REAL
BEGIN
	i:=0
	r:=0.0
	WHILE i<10 DO
		r := r + 0.1
		i := i + 1
	ELSIF i<20 DO
		r := r + 0.2
		i := i + 1
	ELSIF i<100 DO
		i := i + 1
	END
	REPEAT
		i := i - 1
	UNTIL  i = 0
	IF i = 0 THEN r:=0.0 END
END TestCycles.

MODULE TestProcCall
	VAR i INTEGER

	PROCEDURE Init
	BEGIN
		i := 420
		Dec
	END Init

	PROCEDURE Dec
	BEGIN
		WHILE i>42 DO i := i - 1 END
	END Dec

BEGIN
	Init
END TestProcCall.

MODULE TestScopes
	CONST hw = "Hello, world"
	VAR s STRING

	PROCEDURE Init
		CONST n = 5
		VAR i INTEGER
	BEGIN
		i:=0
		WHILE i<n DO s := s + "."; i := i + 1 END
	END Init

BEGIN
	Init
END TestScopes.

MODULE TestChoose
	VAR i INTEGER; s STRING
BEGIN
	i:=0
	WHILE i<5 DO
		CHOOSE (i)
		OF	0: s:=s + "happy "
		OR	1: s:=s + "tree "
		OR	2: s:=s + "friends "
		OR	3: s:=s+ "died"
		ELSE s := s+"!" END
		CHOOSE
		OF	i = 0: s:=s+ "happy "
		OR	i = 1: s:=s+ "tree "
		OR	i = 2: s:=s+ "friends "
		OR	i = 3: s:=s+"died"
		ELSE s := s+"!" END
		i:=i+1
	END

	i:=0
	WHILE i < 10 DO
		CHOOSE i-1
		OF 0, 1, 2, 2 + 2, 1 + 2: s:="small"
		ELSE s:="big" END
		i:=i+1
	END
END TestChoose.

MODULE TestParams
VAR
	i, j INTEGER

	PROCEDURE Do
		VAR x-, y- INTEGER
		VAR i, j INTEGER
	BEGIN
		i := x + y
		j := 0
		WHILE j<3 DO Do2(z: i); j:=j+1 END
	END Do

	PROCEDURE Do2
		VAR z- INTEGER
	BEGIN
		j := j+z
	END Do2

BEGIN
	i := 4
	Do(x: i + 4,  y: i ^ i)
END TestParams.

MODULE TestVarPar
	VAR
		z TRILEAN

	PROCEDURE Do0
		VAR i INTEGER

		PROCEDURE Do
			VAR i- INTEGER
			VAR x+ TRILEAN
		BEGIN
			IF i > 0 THEN x := TRUE
			ELSIF i < 0 THEN x := FALSE
			ELSE x := NULL END
		END Do

	BEGIN
		i:=-1
		WHILE i<=1 DO
			Do(x:: z, i: i)
			i := i + 1
		END;
	END Do0

BEGIN
	Do0
END TestVarPar.

MODULE TestInfix

	VAR z REAL

	PROCEDURE Add3
		VAR i-, j-, k- INTEGER; r+ REAL;
		INFIX r i j k
	BEGIN
		r := i + j + k
	END Add3

	PROCEDURE Add2
		VAR i-, j- REAL; r+ REAL;
		INFIX r i j
	BEGIN
		r := i + j
	END Add2

BEGIN
	z := 1 \Add3 4 (8 + 33)
	z := 1.0 \Add2 z
END TestInfix.

MODULE TestRecursion

	VAR i INTEGER

	PROCEDURE Do
		VAR res+, max- INTEGER
		VAR tmp INTEGER
	BEGIN
		IF max > 0 THEN
			Do(res:: tmp, max: max-1)
		END
		res := res + max + tmp
	END Do

BEGIN
	i:=10
	Do(res:: i, max: 5)
END TestRecursion.

MODULE TestPrecondition

	PROCEDURE Do
		VAR x-, y- INTEGER
		PRE x # 0
		PRE (x > 0) & (y>0)
		POST x < y
	BEGIN
		IF x >= y THEN x := x - y END
	END Do

BEGIN
	Do(x: 4, y: 3)
END TestPrecondition.
