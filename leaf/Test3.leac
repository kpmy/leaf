MODULE TestLinked
	CONST
		value; parent;

	VAR
		root, item PTR
		i INTEGER
		x, y ANY
BEGIN
	NEW(p->root)
	WHILE i<10 DO
		NEW(p->item)
		item$ := <<parent: root, value: i>>
		root := item
		INC(x->i)
	END
	item := root
	WHILE item # NIL DO
		x:=item$
		CHOOSE x AS MAP:
			y:=x.value
			i:=y$
			y:=x.parent
			CHOOSE y AS PTR: item:=y ELSE item:=NIL END;
		ELSE item:=NIL END;
	END
END TestLinked.

MODULE TestHandle
	CONST
		type; data;
		console = "console"
	VAR msg, anwser MAP
BEGIN
	msg.type := console
	msg.data := "Hello, World!"
	msg."ln" := TRUE
	PROCESS(to<-msg, from->anwser)
END TestHandle.

MODULE TestAssert
	VAR s STRING
BEGIN
	s:="hello"
	ASSERT(cond: s # "", code: 20, msg: "string should not be empty")
	(* s:="" *)
	IF s = "" THEN
		HALT(code: 100)
	END
END TestAssert.

MODULE TestProcVar
	VAR
		do, do2 PROCEDURE
		ok BOOLEAN
		x INTEGER

	PROCEDURE Do0
		VAR x INTEGER
		VAR up- INTEGER
		VAR z+ INTEGER
	BEGIN
		x:=100500 + up
		z:=1945
	END Do0

BEGIN
	ok := do # do2
	do := UNDEF
	do := Do0
	IF do # UNDEF THEN
		RUN(proc: do, up: 42, z<-x)
	END
END TestProcVar.
